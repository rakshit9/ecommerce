{"ast":null,"code":"import axios from 'axios';\nimport { SIGNUP_SUCCESS, SIGNUP_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_FAIL, RESET_PASSWORD_CONFIRM_SUCCESS, RESET_PASSWORD_CONFIRM_FAIL, LOGOUT, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_FAIL, AUTHENTICATED_SUCCESS } from './types';\nexport const checkAuthenticated = () => async dispatch => {\n  if (typeof window == 'undefined') {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const signup = ({\n  username,\n  first_name,\n  last_name,\n  phone,\n  address,\n  email,\n  password,\n  re_password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    first_name,\n    last_name,\n    phone,\n    address,\n    email,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n  }\n};\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: RESET_PASSWORD_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: RESET_PASSWORD_FAIL\n    });\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: RESET_PASSWORD_CONFIRM_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: RESET_PASSWORD_CONFIRM_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n}; // ---------------------------------------------","map":{"version":3,"sources":["/home/rakshit/Desktop/webdev/mb/project/capstone-team2/frontend/src/actions/auth.js"],"names":["axios","SIGNUP_SUCCESS","SIGNUP_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","RESET_PASSWORD_CONFIRM_SUCCESS","RESET_PASSWORD_CONFIRM_FAIL","LOGOUT","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_FAIL","AUTHENTICATED_SUCCESS","checkAuthenticated","dispatch","window","type","localStorage","getItem","config","headers","body","JSON","stringify","token","res","post","process","env","REACT_APP_API_URL","data","code","err","load_user","get","payload","login","email","password","signup","username","first_name","last_name","phone","address","re_password","verify","uid","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    RESET_PASSWORD_SUCCESS,\n    RESET_PASSWORD_FAIL,\n    RESET_PASSWORD_CONFIRM_SUCCESS,\n    RESET_PASSWORD_CONFIRM_FAIL,\n    LOGOUT,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_FAIL,\n    AUTHENTICATED_SUCCESS\n} from './types';\n\nexport const checkAuthenticated = () => async dispatch => {\n    if (typeof window == 'undefined') {\n        dispatch({\n            type: AUTHENTICATED_FAIL\n        });\n    }\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        };\n    \n        const body = JSON.stringify({ token: localStorage.getItem('access') });\n    \n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n    \n            if (res.data.code !== 'token_not_valid') {\n                dispatch({\n                    type: AUTHENTICATED_SUCCESS\n                });\n            } else {\n                dispatch({\n                    type: AUTHENTICATED_FAIL\n                });\n            }\n        } catch (err) {\n            dispatch({\n                type: AUTHENTICATED_FAIL\n            });\n        }\n    } else {\n        dispatch({\n            type: AUTHENTICATED_FAIL\n        });\n    }\n};\n\nexport const load_user = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\n                'Accept': 'application/json'\n            }\n        };\n\n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n\n            dispatch({\n                type: USER_LOADED_SUCCESS,\n                payload: res.data\n            });\n        } catch (err) {\n            dispatch({\n                type: USER_LOADED_FAIL\n            });\n        }\n    } else {\n        dispatch({\n            type: USER_LOADED_FAIL\n        });\n    }\n};\n\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(load_user());\n    } catch (err) {\n        dispatch({\n            type: LOGIN_FAIL\n        });\n    }\n};\n\nexport const signup = ({ username,first_name,last_name,phone,address, email, password, re_password  }) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({username,first_name,last_name,phone,address, email, password, re_password  }); \n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n\n        dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: SIGNUP_FAIL\n        });\n    }\n};\n\nexport const verify = (uid, token) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ uid, token }); \n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n\n        dispatch({\n            type: ACTIVATION_SUCCESS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: ACTIVATION_FAIL\n        });\n    }\n};\n\nexport const reset_password = (email) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ email }); \n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n\n        dispatch({\n            type: RESET_PASSWORD_SUCCESS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: RESET_PASSWORD_FAIL\n        });\n    }\n};\n\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ uid, token, new_password, re_new_password }); \n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n\n        dispatch({\n            type: RESET_PASSWORD_CONFIRM_SUCCESS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: RESET_PASSWORD_CONFIRM_FAIL\n        });\n    }\n};\n\nexport const logout = () => dispatch => {\n    dispatch({ type: LOGOUT });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n// ---------------------------------------------\n\n\n\n"]},"metadata":{},"sourceType":"module"}